import heapq

# Define the goal state and initial state
goal_state = [[1, 2, 3], [8, 0, 4], [7, 6, 5]]
initial_state = [[2, 8, 3], [1, 6, 4], [7, 0, 5]]

# Define possible moves
moves = [(0, -1), (0, 1), (-1, 0), (1, 0)]

def is_valid_move(x, y):
    return 0 <= x < 3 and 0 <= y < 3

def solve_puzzle(initial_state, goal_state):
    open_set = [(0, initial_state, None)]
    closed_set = set()

    while open_set:
        cost, current_state, parent = heapq.heappop(open_set)

        if current_state == goal_state:
            # Goal state found
            path = []
            while parent:
                path.append(current_state)
                cost, current_state, parent = parent
            path.append(initial_state)
            return path[::-1]

        if tuple(map(tuple, current_state)) in closed_set:
            continue

        closed_set.add(tuple(map(tuple, current_state)))

        for dx, dy in moves:
            x, y = None, None
            for i in range(3):
                for j in range(3):
                    if current_state[i][j] == 0:
                        x, y = i, j
            new_x, new_y = x + dx, y + dy

            if is_valid_move(new_x, new_y):
                new_state = [list(row) for row in current_state]
                new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]
                new_cost = cost + 1 + heuristic(new_state, goal_state)
                heapq.heappush(open_set, (new_cost, new_state, (cost, current_state, parent)))

    return None

def heuristic(state, goal_state):
    # Manhattan distance heuristic
    total_distance = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:
                x, y = divmod(state[i][j] - 1, 3)
                total_distance += abs(x - i) + abs(y - j)
    return total_distance

solution = solve_puzzle(initial_state, goal_state)
if solution:
    for i, state in enumerate(solution):
        print(f"Step {i + 1}:")
        for row in state:
            print(row)
        print()
else:
    print("No solution found.")
